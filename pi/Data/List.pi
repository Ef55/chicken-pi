module List where

import Nat
import Maybe

data List (T: Set) : Set :=
  Nil: List T
  Cons (h: T) (t: List T) : List T

nth : (S: Set) -> List S -> Nat -> Maybe S
nth = fix nth S [ls] . \ n . case ls of
  Nil -> Nothing S
  Cons h t -> case n of
            Z -> Some S h
            S n' -> nth S t n'

foldLeft : (U: Set) -> (S: Set) -> (S -> U -> S) -> S -> List U -> S
foldLeft = fix foldLeft U S f s [ts] . case ts of
  Nil -> s
  Cons t ts' -> foldLeft U S f (f s t) ts'

foldRight : (U: Set) -> (S: Set) -> (U -> S -> S) -> S -> List U -> S
foldRight = fix foldRight U S f s [ts] . case ts of
  Nil -> s
  Cons t ts' -> f t (foldRight U S f s ts')

concat : (U: Set) -> List U -> List U -> List U
concat = \U l r . foldRight U (List U) (Cons U) r l