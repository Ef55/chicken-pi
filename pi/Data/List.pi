module List where

import Nat
import Maybe

data List (T: Type 1) : Type 1 :=
  Nil: List T
  Cons (h: T) (t: List T) : List T

nth : (S: Type 1) -> List S -> Nat -> Maybe S
nth = fix nth S [ls] . \ n . case ls of
  Nil -> Nothing S
  Cons h t -> case n of
            Z -> Some S h
            S n' -> nth S t n'

foldLeft : (U: Type 1) -> (S: Type 1) -> (S -> U -> S) -> S -> List U -> S
foldLeft = fix foldLeft U S f s [ts] . case ts of
  Nil -> s
  Cons t ts' -> foldLeft U S f (f s t) ts'

foldRight : (U: Type 1) -> (S: Type 1) -> (U -> S -> S) -> S -> List U -> S
foldRight = fix foldRight U S f s [ts] . case ts of
  Nil -> s
  Cons t ts' -> f t (foldRight U S f s ts')

concat : (U: Type 1) -> List U -> List U -> List U
concat = fix concat U [l] . \ r . case l of
  Nil -> r
  Cons h t -> Cons U h (concat U t r)